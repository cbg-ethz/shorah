#!/usr/bin/env @PYTHON@

from __future__ import print_function
from future.utils import iteritems
import shorah_dec
import argparse
import os

# parse command line
parser = argparse.ArgumentParser(description="Local haplotype recontruction: Dirichlet process mixture",
                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter)
opts = shorah_dec.main.func_defaults  # set the defaults (see http://bit.ly/2hCTQl)

group1 = parser.add_argument_group('Input files', 'Required input')
group2 = parser.add_argument_group('Run options', 
                                   'Parameters that can (maybe should) be changed \
                                   according to the needs')
group3 = parser.add_argument_group('More options', 
                                   'Do you really want to change this?')


group1.add_argument("-b", "--bam", metavar='BAM', required=True, type=str,
                    dest="in_bam", help="file with aligned reads in .bam format")

group1.add_argument("-f", "--fasta", metavar='REF', required=True, type=str, 
                    dest="in_fasta", help="reference genome in fasta format")

group2.add_argument("-w", "--windowsize", metavar='INT', required=False, type=int, 
                    default=opts[0], dest="win_length", help="window size")

group2.add_argument("-r", "--region", metavar='chrm:start-stop', required=False, type=str, 
                    default=opts[2], dest="region", help="region in format 'chrm:start-stop', \
                                                          e.g. 'ch3:1000-3000'")

group2.add_argument("-a", "--alpha", metavar='FLOAT', required=False, type=float, 
                    default=opts[4], dest="alpha", help="alpha in dpm sampling")

group2.add_argument("-S", "--seed", metavar='INT', required=False, type=int,
                    default=opts[6], dest="seed", help="set seed for reproducible results")

group3.add_argument("-s", "--winshifts", metavar='INT', required=False, type=int,
                    default=opts[1], dest="win_shifts", help="number of window shifts")

group3.add_argument("-x", "--maxcov", metavar='INT', required=False, type=int,
                    default=opts[3], dest="max_coverage", help="approximate max coverage allowed")

group3.add_argument("-k", "--keep_files", required=False, action='store_true',
                    default=opts[5], dest="keep_files", help="keep all intermediate files")               

args = parser.parse_args()

supported_formats = {
    'bam': 'aligned reads',
    'fasta': 'reference genome'
}
# check the input file is in supported format
try:
    tmp_filename = os.path.split(args.in_bam)[1]
    [in_stem, in_format] = [tmp_filename.split('.')[0],
                            tmp_filename.split('.')[-1]]
    t = supported_formats[in_format]
except IndexError:
    shorah_dec.declog.error('The input file must be filestem.format')
    print('The input file must be filestem.format')
    print('Supported formats are')
    for sf in iteritems(supported_formats):
        print(sf[0], ':', sf[1])
    sys.exit()
except KeyError:
    shorah_dec.declog.error('format unknown')
    print(in_format, 'format unknown')
    print('Supported formats are')
    for sf in iteritems(supported_formats):
        print(sf[0], ':', sf[1])
    sys.exit()

shorah_dec.main(args.in_bam, args.in_fasta, args.win_length, args.win_shifts,
        args.region, args.max_coverage, args.alpha, args.keep_files, args.seed)
